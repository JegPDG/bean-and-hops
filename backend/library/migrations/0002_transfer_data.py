# Generated by Django 5.2.5 on 2025-09-18 04:09

from django.db import migrations

# library/migrations/0002_transfer_data.py
from django.db import migrations

def transfer_data_forward(apps, schema_editor):
    # Get models from both apps
    # Replace 'your_original_app' with your actual app name
    OldType = apps.get_model('beanandhops', 'Type')
    OldCategory = apps.get_model('beanandhops', 'Category')
    OldSubtype = apps.get_model('beanandhops', 'Subtype')
    
    LibType = apps.get_model('library', 'Type')
    LibCategory = apps.get_model('library', 'Category')
    LibSubtype = apps.get_model('library', 'Subtype')
    
    # Create ID mappings for foreign key updates
    type_mapping = {}
    category_mapping = {}
    subtype_mapping = {}
    
    # Transfer Types
    print("Transferring Types...")
    for old_type in OldType.objects.all():
        new_type = LibType.objects.create(name=old_type.name)
        type_mapping[old_type.id] = new_type.id
        print(f"  Transferred Type: {old_type.name}")
    
    # Transfer Categories
    print("Transferring Categories...")
    for old_category in OldCategory.objects.all():
        new_category = LibCategory.objects.create(
            type_id=type_mapping[old_category.type_id],
            name=old_category.name
        )
        category_mapping[old_category.id] = new_category.id
        print(f"  Transferred Category: {old_category.name}")
    
    # Transfer Subtypes
    print("Transferring Subtypes...")
    for old_subtype in OldSubtype.objects.all():
        new_subtype = LibSubtype.objects.create(
            category_id=category_mapping[old_subtype.category_id],
            name=old_subtype.name
        )
        subtype_mapping[old_subtype.id] = new_subtype.id
        print(f"  Transferred Subtype: {old_subtype.name}")
    
    print("Data transfer completed!")

def transfer_data_reverse(apps, schema_editor):
    # Clean up library data if rolling back
    LibType = apps.get_model('library', 'Type')
    LibCategory = apps.get_model('library', 'Category') 
    LibSubtype = apps.get_model('library', 'Subtype')
    
    LibSubtype.objects.all().delete()
    LibCategory.objects.all().delete()
    LibType.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('library', '0001_initial'),
        ('beanandhops', '0001_initial'),  # Replace with your app name
    ]

    operations = [
        migrations.RunPython(transfer_data_forward, transfer_data_reverse),
    ]
